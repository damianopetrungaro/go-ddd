// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package instrument

//go:generate gowrap gen -p github.com/organization/order-service/internal/instrument -i Service -t https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry -o service_trace.go -l ""

import (
	"context"

	"github.com/organization/order-service"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// ServiceWithTracing implements Service interface instrumented with opentracing spans
type ServiceWithTracing struct {
	Service
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewServiceWithTracing returns ServiceWithTracing
func NewServiceWithTracing(base Service, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ServiceWithTracing {
	d := ServiceWithTracing{
		Service:   base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// MarkAsDelivered implements Service
func (_d ServiceWithTracing) MarkAsDelivered(ctx context.Context, i1 order.ID) (op1 *order.Order, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.MarkAsDelivered")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"i1":  i1}, map[string]interface{}{
				"op1": op1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.MarkAsDelivered(ctx, i1)
}

// MarkAsShipped implements Service
func (_d ServiceWithTracing) MarkAsShipped(ctx context.Context, i1 order.ID) (op1 *order.Order, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.MarkAsShipped")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"i1":  i1}, map[string]interface{}{
				"op1": op1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.MarkAsShipped(ctx, i1)
}

// Place implements Service
func (_d ServiceWithTracing) Place(ctx context.Context, n1 order.Number, u1 order.UserID) (op1 *order.Order, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Service.Place")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"n1":  n1,
				"u1":  u1}, map[string]interface{}{
				"op1": op1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Service.Place(ctx, n1, u1)
}
