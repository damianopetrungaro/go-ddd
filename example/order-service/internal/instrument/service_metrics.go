// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/629c2e966eaf72a2446886fd2dd4885ac1b3fbda/templates/prometheus
// gowrap: http://github.com/hexdigest/gowrap

package instrument

//go:generate gowrap gen -p github.com/organization/order-service/internal/instrument -i Service -t https://raw.githubusercontent.com/hexdigest/gowrap/629c2e966eaf72a2446886fd2dd4885ac1b3fbda/templates/prometheus -o service_metrics.go -l ""

import (
	"context"
	"time"

	"github.com/organization/order-service"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// ServiceWithPrometheus implements Service interface with all methods wrapped
// with Prometheus metrics
type ServiceWithPrometheus struct {
	base         Service
	instanceName string
}

var serviceDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "service_duration_seconds",
		Help:       "service runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewServiceWithPrometheus returns an instance of the Service decorated with prometheus summary metric
func NewServiceWithPrometheus(base Service, instanceName string) ServiceWithPrometheus {
	return ServiceWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// MarkAsDelivered implements Service
func (_d ServiceWithPrometheus) MarkAsDelivered(ctx context.Context, i1 order.ID) (op1 *order.Order, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceDurationSummaryVec.WithLabelValues(_d.instanceName, "MarkAsDelivered", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.MarkAsDelivered(ctx, i1)
}

// MarkAsShipped implements Service
func (_d ServiceWithPrometheus) MarkAsShipped(ctx context.Context, i1 order.ID) (op1 *order.Order, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceDurationSummaryVec.WithLabelValues(_d.instanceName, "MarkAsShipped", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.MarkAsShipped(ctx, i1)
}

// Place implements Service
func (_d ServiceWithPrometheus) Place(ctx context.Context, n1 order.Number, u1 order.UserID) (op1 *order.Order, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		serviceDurationSummaryVec.WithLabelValues(_d.instanceName, "Place", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Place(ctx, n1, u1)
}
