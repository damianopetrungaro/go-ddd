// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/629c2e966eaf72a2446886fd2dd4885ac1b3fbda/templates/prometheus
// gowrap: http://github.com/hexdigest/gowrap

package instrument

//go:generate gowrap gen -p github.com/organization/order-service -i Repo -t https://raw.githubusercontent.com/hexdigest/gowrap/629c2e966eaf72a2446886fd2dd4885ac1b3fbda/templates/prometheus -o metric.go -l ""

import (
	"context"
	"time"

	"github.com/organization/order-service"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// RepoWithPrometheus implements order.Repo interface with all methods wrapped
// with Prometheus metrics
type RepoWithPrometheus struct {
	base         order.Repo
	instanceName string
}

var repoDurationSummaryVec = promauto.NewSummaryVec(
	prometheus.SummaryOpts{
		Name:       "repo_duration_seconds",
		Help:       "repo runtime duration and result",
		MaxAge:     time.Minute,
		Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},
	},
	[]string{"instance_name", "method", "result"})

// NewRepoWithPrometheus returns an instance of the order.Repo decorated with prometheus summary metric
func NewRepoWithPrometheus(base order.Repo, instanceName string) RepoWithPrometheus {
	return RepoWithPrometheus{
		base:         base,
		instanceName: instanceName,
	}
}

// Add implements order.Repo
func (_d RepoWithPrometheus) Add(ctx context.Context, order *order.Order) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		repoDurationSummaryVec.WithLabelValues(_d.instanceName, "Add", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Add(ctx, order)
}

// Get implements order.Repo
func (_d RepoWithPrometheus) Get(ctx context.Context, id order.ID) (op1 *order.Order, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		repoDurationSummaryVec.WithLabelValues(_d.instanceName, "Get", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Get(ctx, id)
}
