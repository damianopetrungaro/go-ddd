<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="d6219523-616c-40c2-a4f2-b72b17fbc59f" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Go File" />
      </list>
    </option>
  </component>
  <component name="GOROOT" url="file:///opt/homebrew/Cellar/go/1.20.2/libexec" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2MdpDf7ss84aeGnFf5G5D2GCrYc" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "DefaultGoTemplateProperty": "Go File",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.go.formatter.settings.were.checked": "true",
    "RunOnceActivity.go.migrated.go.modules.settings": "true",
    "RunOnceActivity.go.modules.go.list.on.any.changes.was.set": "true",
    "RunOnceActivity.go.vendoring.notification.had.been.shown": "true",
    "WebServerToolWindowFactoryState": "false",
    "configurable..is.expanded": "false",
    "configurable.GoLibrariesConfigurable.is.expanded": "true",
    "go.import.settings.migrated": "true",
    "go.sdk.automatically.set": "true",
    "last_opened_file_path": "/Users/damianopetrungaro/GolandProjects/go-ddd/example/order-service/config/database",
    "node.js.detected.package.eslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "go.vgo"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/example/order-service/config/database" />
      <recent name="$PROJECT_DIR$/example/order-service" />
      <recent name="$PROJECT_DIR$/example/order-service/config/database/migration" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/example/order-service/cmd/internal" />
      <recent name="$PROJECT_DIR$/example/order-service/cmd" />
      <recent name="$PROJECT_DIR$/example/order-service/internal" />
      <recent name="$PROJECT_DIR$/example/order-service/config/database/migration" />
      <recent name="$PROJECT_DIR$/example/order-service/config" />
    </key>
  </component>
  <component name="RunManager" selected="Go Test.go test order-service">
    <configuration name="TestCache_Add/failure in github.com/organization/order-service/cmd/internal/repo/cache" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="go-ddd" />
      <working_directory value="$PROJECT_DIR$/example/order-service/cmd/internal/repo/cache" />
      <root_directory value="$PROJECT_DIR$/example/order-service" />
      <kind value="PACKAGE" />
      <package value="github.com/organization/order-service/cmd/internal/repo/cache" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestCache_Add\E$/^\Qfailure\E$" />
      <method v="2" />
    </configuration>
    <configuration name="TestPostgres_Add in github.com/organization/order-service/cmd/internal/repo/postgres" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="go-ddd" />
      <working_directory value="$PROJECT_DIR$/example/order-service/cmd/internal/repo/postgres" />
      <root_directory value="$PROJECT_DIR$/example/order-service" />
      <kind value="PACKAGE" />
      <package value="github.com/organization/order-service/cmd/internal/repo/postgres" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestPostgres_Add\E$" />
      <method v="2" />
    </configuration>
    <configuration name="go test cache" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="go-ddd" />
      <working_directory value="$PROJECT_DIR$/example/order-service/cmd/internal/repo/cache" />
      <root_directory value="$PROJECT_DIR$/example/order-service" />
      <kind value="DIRECTORY" />
      <directory value="$PROJECT_DIR$/example/order-service/cmd/internal/repo/cache" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <configuration name="go test order-service" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="go-ddd" />
      <working_directory value="$PROJECT_DIR$/example/order-service" />
      <kind value="DIRECTORY" />
      <directory value="$PROJECT_DIR$/example/order-service" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <configuration name="go test postgres" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="go-ddd" />
      <working_directory value="$PROJECT_DIR$/example/order-service/cmd/internal/repo/postgres" />
      <root_directory value="$PROJECT_DIR$/example/order-service" />
      <kind value="DIRECTORY" />
      <directory value="$PROJECT_DIR$/example/order-service/cmd/internal/repo/postgres" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Go Test.go test order-service" />
        <item itemvalue="Go Test.go test postgres" />
        <item itemvalue="Go Test.TestPostgres_Add in github.com/organization/order-service/cmd/internal/repo/postgres" />
        <item itemvalue="Go Test.go test cache" />
        <item itemvalue="Go Test.TestCache_Add/failure in github.com/organization/order-service/cmd/internal/repo/cache" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/go_ddd$go_test_cache.out" NAME="go test cache Coverage Results" MODIFIED="1678361566951" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/go_ddd$go_test_example.out" NAME="go test example Coverage Results" MODIFIED="1678107519258" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/go_ddd$go_test_order_service.out" NAME="go test order-service Coverage Results" MODIFIED="1678381795317" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/go_ddd$go_test_internal.out" NAME="go test internal Coverage Results" MODIFIED="1678117831633" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
  </component>
</project>